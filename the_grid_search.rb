=begin

The Grid Search
from https://www.hackerrank.com/challenges/the-grid-search

Given a 2D array of digits, try to find the location of a given 2D pattern of
digits. For example, consider the following 2D matrix:

1234567890   
0987654321   
1111111111   
1111111111   
2222222222

Assume we need to look for the following 2D pattern:

876543   
111111   
111111

If we scan through the original array, we observe that the 2D pattern begins
at the second row and the third column of the larger grid (the 8 in the second
row and third column of the larger grid is the top-left corner of the pattern
we are searching for).

So, a 2D pattern of P digits is said to be present in a larger grid G, if the
latter contains a contiguous, rectangular 2D grid of digits matching with the
pattern P, similar to the example shown above.

Input Format:  
The first line contains an integer, T, which is the number of test cases. 
T test cases follow, each having a structure as described below:

The first line contains two space-separated integers, R and C, indicating the
number of rows and columns in the grid G, respectively. This is followed by R
lines, each with a string of C digits, which represent the grid G. The
following line contains two space-separated integers, r and c, indicating the
number of rows and columns in the pattern grid P. This is followed by r lines,
each with a string of c digits, which represent the pattern P.

Constraints: 
1≤T≤5 
1≤R,r,C,c≤1000 
1≤r≤R 
1≤c≤C

Test Case Generation:  
Each individual test case has been generated by first specifying the size  (R
and C) of the large 2D matrix, and then randomly generating the digits in it.
A limited number of digits in the larger matrix may be changed by the problem
setter (no more than 5% of the total number of digits in the matrix). So the
larger 2D matrix is almost-random. The pattern matrix has been manually-
curated by the problem setter.

Output Format Display:
'YES' or 'NO', depending on whether (or not) you find that the larger grid G
contains the rectangular pattern P. The evaluation will be case sensitive.

=end

def get_integers
	gets.strip.split(" ").map(&:to_i)
end

def get_string
	gets.strip
end

def get_strings(number_of_lines)
	lines = []
	number_of_lines.times { lines.push(get_string) }
	lines
end

def put_result(boolean)
	puts (boolean ? "YES" : "NO")
end

# A grid is an array of strings of the same length.
def contains?(primary_grid, match_grid)
	match_columns = match_grid.first.length
	columns_start = 0
	columns_end = columns_start + match_columns - 1
	while columns_end < primary_grid.first.length
		match_row = 0
		primary_grid.each do |primary_row|
			primary_slice = primary_row[columns_start..columns_end]
			if match_grid[match_row] == primary_slice
				match_row += 1
				return true if match_row == match_grid.length
			end
		end
		columns_start += 1; columns_end += 1
	end
	false
end

test_cases = get_integers.first
results = []

test_cases.times do
	primary_grid_rows = get_integers.first
	primary_grid = get_strings(primary_grid_rows)

	match_grid_rows = get_integers.first
	match_grid = get_strings(match_grid_rows)
	
	result = contains?(primary_grid, match_grid)
	results.push(result)
end

results.each { |result| put_result(result) }